{# Based on https://www.digitalocean.com/community/tutorials/how-to-implement-a-basic-firewall-template-with-iptables-on-ubuntu-14-04 #}
{# Also on https://terrywang.net/2016/02/02/new-iptables-gotchas.html #}
*filter
# Allow all outgoing, but drop incoming and forwarding packets by default
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Chains
:UDP - [0:0]
:TCP - [0:0]
:ICMP - [0:0]

# Local Services
-A TCP -p tcp --dport 22 -j ACCEPT
-A TCP -p tcp --dport 1194 -j ACCEPT
-A UDP -p udp --dport 1194 -j ACCEPT
-A UDP -p udp --dport 60001 -j ACCEPT
-A ICMP -p icmp -j ACCEPT

# Boilerplate acceptance policy
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT

# Drop invalid packets
-A INPUT -m conntrack --ctstate INVALID -j DROP

# Pass traffic to protocol-specific chains
## Only allow new connections (established and related should already be handled)
## For TCP, additionally only allow new SYN packets since that is the only valid
## method for establishing a new TCP connection
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
-A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
-A INPUT -p icmp -m conntrack --ctstate NEW -j ICMP

# Reject anything that's fallen through to this point
## Try to be protocol-specific w/ rejection message
-A INPUT -p all -j LOG --log-prefix "Drop: "
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -j REJECT --reject-with icmp-proto-unreachable

# Now to handle forwarded traffic
{% for destination in destinations|default({}) %}
{% for source in sources|default({}) %}
{% for port in destination.ports|default({}) %}
{% if role == 'local' %}
-A FORWARD --source {{ source.from }} --destination {{ destination.as }} --protocol {{ port.protocol }} --destination-port {{ port.number }} -j ACCEPT
{% else %}
-A FORWARD --source {{ source.to }} --destination {{ destination.to }} --protocol {{ port.protocol }} --destination-port {{ port.number }} -j ACCEPT
{% endif %}
{% endfor %}{# port #}
{% if role == 'local' %}
-A FORWARD --source {{ source.from }} --destination {{ destination.as }} --protocol icmp -j ACCEPT
{% else %}
-A FORWARD --source {{ source.to }} --destination {{ destination.to }} --protocol icmp -j ACCEPT
{% endif %}
{% endfor %}{# source #}
{% endfor %}{# destination #}
# Commit the changes
COMMIT

*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

-A OUTPUT -p all -j TRACE
-A PREROUTING -p all -j TRACE
COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

{# Inbound Rules #}
{# TODO: Work out return path :) #}

{# Outbound Rules #}
{% if role == 'local' and sources is defined %}
{% for source in sources %}
-A POSTROUTING --source {{ source.from }} -o tun0 -j SNAT --to-source {{ source.to }}
{% endfor %}
{% elif role == 'remote' and destinations is defined %}
{% for destination in destinations %}
-A PREROUTING --destination {{ destination.as }} -p all -j DNAT --to-destination {{destination.to }}
-A POSTROUTING --destination {{ destination.to }} -o {{ local_interface }} -j MASQUERADE
{% endfor %}
{% endif %}
COMMIT

*security
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT
